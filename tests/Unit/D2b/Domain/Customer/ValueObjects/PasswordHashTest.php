<?php

namespace Tests\Unit\D2b\Domain\Customer\ValueObjects;

use D2b\Domain\Customer\ValueObjects\PasswordHash;
use InvalidArgumentException;
use PHPUnit\Framework\TestCase;
use Throwable;

class PasswordHashTest extends TestCase
{
    public function test_it_should_be_instance_of_correct_class()
    {
        $password = 'password';

        $hash = PasswordHash::hashPassword($password);

        $this->assertInstanceOf(PasswordHash::class, $hash);
    }

    public function test_it_should_return_password_in_string_format()
    {
        $password = 'password';

        $hash = PasswordHash::hashPassword($password);

        $this->assertIsString($hash->toString());
    }

    public function test_it_should_match_encrypted_password_with_plain_text()
    {
        $password = 'password';

        $hash = PasswordHash::hashPassword($password);

        $this->assertTrue(password_verify($password, $hash->toString()));
    }

    public function test_it_should_encrypt_password()
    {
        $password = 'password';

        $hash = PasswordHash::hashPassword($password);

        $isNotHashed = password_needs_rehash(
            $hash->toString(),
            PASSWORD_BCRYPT,
            [
                'cost' => 10,
            ]
        );

        $this->assertFalse($isNotHashed);
        $this->assertInstanceOf(PasswordHash::class, $hash);
    }

    public function test_it_should_throw_with_invalid_password_type()
    {
        $test = '$2y$04$jwLYdVA7Zceg8lSmCJiFO.dn1q0Fe5jh8c52B7xq0KVVkmBWeXZ4e';

        try {
            new PasswordHash($test);

            $this->assertTrue(false);
        } catch (Throwable $th) {
            $this->assertInstanceOf(
                InvalidArgumentException::class,
                $th
            );
        }
    }

    public function test_it_should_throw_with_invalid_encryptation_algorithm()
    {
        $password = sha1('password');

        try {
            new PasswordHash($password);
            $this->assertTrue(false);
        } catch (Throwable $th) {
            $this->assertInstanceOf(
                InvalidArgumentException::class,
                $th
            );
        }
    }

    public function test_it_should_preserve_valid_password()
    {
        //Generated by default Laravel Hash::make() with [rounds => 10] option.
        $test = '$2y$10$YO2UXdQ6LaG7aGqJcaytu.8Zmv5Xy2kSpl24gEOUq2fl/GhCDcs42';

        $password = new PasswordHash($test);

        $this->assertEquals($test, $password->toString());
    }
}
